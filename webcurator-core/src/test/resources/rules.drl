package org.webcurator.core.rules

import org.webcurator.domain.model.core.TargetInstance;
import org.webcurator.domain.model.core.Seed;
import org.webcurator.domain.model.core.AbstractTarget;
import org.webcurator.domain.model.core.HarvesterStatus;
import org.webcurator.domain.model.core.ArcHarvestResult;
import org.webcurator.domain.model.core.Indicator;
import org.webcurator.domain.model.core.IndicatorReportLine;
import org.webcurator.core.rules.WordCounter;
import org.webcurator.core.store.tools.QualityReviewFacade;
import org.webcurator.core.util.ConverterUtil;
import org.webcurator.core.harvester.agent.HarvesterStatusUtil;
import org.webcurator.core.harvester.coordinator.HarvestCoordinator;
import org.webcurator.core.scheduler.TargetInstanceManager;
import org.webcurator.domain.model.dto.HarvestHistoryDTO;
import org.webcurator.ui.common.HeritrixStatusDescription;

import java.text.MessageFormat;
import javax.activation.MimetypesFileTypeMap;
import org.springframework.mail.javamail.ConfigurableMimeFileTypeMap;

import java.lang.StringBuilder;

import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Date;
import java.util.Map
import org.webcurator.common.HeritrixStatusDescription
import org.webcurator.common.ui.HeritrixStatusDescription;

// rules file version (for deployment verification only)
global String VERSION;

// map of global constants needed by the rules engine (defines the message formats and advice that can be assigned to an indicator)
global Map<String, String> globals;

rule "Set rules file version"
	dialect "java"
	
	salience 30
	when
		eval(true)
		// map to relay the decision rationale to the ui
        $m  : RuleMessageMap()
	then
		// the rules file version (for deployment verification only)
        VERSION = "1.1.6";
        $m.put(drools.getRule().getName(), VERSION);
end

// indicator declaration for computations involving a reference crawl (ti)
declare ReferenceCrawlIndicator
	name 				: String	// the name of the indicator (eg: Long URIs)
	floatValue			: Float		// the current numerical value of the indicator (if numeric)
	stringValue 		: String	// the current string value of the indicator (if character based)
	positiveTolerance	: Float		// the current value + the upperLimitPercentage (computed)
	negativeTolerance	: Float		// the current value - the lowerLimitPercentage (computed)
	upperLimitPercentage: Float		// upper limit for the tolerance value expressed as a percentage (eg: +10%, user defined)
	lowerLimitPercentage: Float		// lower limit for the tolerance value expressed as a percentage (eg: -10%, user defined)	
	upperLimit			: Float		// upper limit for the current value (user defined)
	lowerLimit			: Float		// lower limit for the current value (user defined)
end

// fact declaration that an indicator has changed and so requires
// reprocessing by the rules engine
declare HasChanged
	indicator : Indicator
	targetInstance : TargetInstance
end

// fact declaration that a ti has an indicator whos tolerance value (+ve/-ve) should be computed 
declare InferRCIToleranceValue
	targetInstance 	: TargetInstance
	rci				: ReferenceCrawlIndicator
end

// fact declaration that a ti has an indicator whos tolerance percentages (+%/-%) should be computed 
declare InferRCITolerance
	targetInstance 	: TargetInstance
	rci				: ReferenceCrawlIndicator
end

// fact declaration that an upper limit for an indicator should be computed 
// from the reference crawl upper limit percentage  
declare InferIndicatorUpperLimitValue
	targetInstance 	: TargetInstance
	rci				: ReferenceCrawlIndicator
	indicator		: Indicator
end

// fact declaration that an upper limit tolerance value for an indicator should be computed 
// from the reference crawl upper limit percentage  
declare InferIndicatorUpperLimitToleranceValue
	rcTargetInstance 	: TargetInstance			// the reference crawl
	rci					: ReferenceCrawlIndicator
	targetInstance		: TargetInstance			// the ti
	indicator			: Indicator
end

// fact declaration that an indicators value has exceeeded an upper limit
declare HasExceededUpperLimit
	targetInstance 	: TargetInstance
	indicator		: Indicator
end

// fact declaration that an indicators value has fallen below a lower limit
declare HasFallenBelowLowerLimit
	targetInstance 	: TargetInstance
	indicator		: Indicator
end

// outcome declaration for reject
declare Reject
	indicator 		: Indicator
	message			: String
end

// outcome declaration for investigate
declare Investigate
	indicator 		: Indicator
	message			: String
end

// outcome declaration for archive
declare Archive
	indicator 		: Indicator
	message			: String
end

// outcome declaration for delist
declare Delist
	indicator 		: Indicator
	message			: String
end

rule "Initialise indicators"
	dialect "java"
	
	// this rule is executed second to initialise the QA indicators
	salience 10
	
	when
     	// for each indicator, generate a corresponding indicator
     	// for the reference crawl (ie: the RCI - Reference Crawl Indicator)
     	// also reset the indicator value
     	$indicator : Indicator();
	then	
     	
		// copy over the values from the indicator
		ReferenceCrawlIndicator rci = new ReferenceCrawlIndicator();
		rci.setName($indicator.getName() + " (RCI)");
		rci.setFloatValue(0.0F);
		rci.setPositiveTolerance(0.0F);
		rci.setNegativeTolerance(0.0F);
		rci.setUpperLimitPercentage($indicator.getUpperLimitPercentage());
		rci.setLowerLimitPercentage($indicator.getLowerLimitPercentage());
		rci.setUpperLimit($indicator.getUpperLimit());
		rci.setLowerLimit($indicator.getLowerLimit());
		
		insert(rci);
		
		// reset the indicator value (since we will be deriving it in subsequent rules)
		$indicator.setFloatValue(0.0F);
		
end

/*
 *	INDICATORS
*/

rule "Set Content Downloaded for Reference Crawl"
	dialect "java"
	// the indicators are calculated after the prerequisite inferences
	salience 8
    when
    	// the Target Instance to analyse
    	$ti : TargetInstance( 	$hs : status,
    							// the ti is the reference crawl
    							target.referenceCrawlOid == oid
    	)
        // the QA Indicator to compute
        $rci: ReferenceCrawlIndicator( 	$v : floatValue, 
        								name == "Content Downloaded" + " (RCI)" 
        )
	    // map to relay the decision rationale to the ui
        $m : RuleMessageMap()
    then
    	// set the content downloaded indicator for the rci
		$rci.setFloatValue( new Float($hs.getDataDownloaded()) );
		$m.put(drools.getRule().getName(), "Target instance " + $ti.getOid() + " has value of " + $rci.getFloatValue() + " for indicator " + $rci.getName()); 
		
    	// insert the fact that the indicator tolerance should be infered
    	InferRCIToleranceValue inferToleranceValue = new InferRCIToleranceValue( $ti, $rci );
    	insert(inferToleranceValue);
end

rule "Set Content Downloaded for ti"   
	dialect "java"
	// the indicators are calculated after the prerequisite inferences
	salience 8
    when
    	// the Target Instance to analyse
    	$ti : TargetInstance( 	state == "Harvested",
    							$hs : status
    	)
        // the QA Indicator to compute
        $i : Indicator( $v : floatValue, 
        				name == "Content Downloaded" 
        )
        // map to relay the decision rationale to the ui
        $m : RuleMessageMap()
    then
    	//System.out.println("$hs.getDataDownloaded(): " + $hs.getDataDownloaded());
    	// set the content downloaded indicator for the ti
		$i.setFloatValue( new Float($hs.getDataDownloaded()) );
		$m.put(drools.getRule().getName(), "Target instance " + $ti.getOid() + " has value of " + $i.getFloatValue() + " for indicator " + $i.getName()); 
    	
     	// raise a notification if the indicator value has changed
		// only if the crawl is new (invokes absolute limit tests)
		if ($ti.getTarget().getCrawls() == 1) {
			HasChanged notification = new HasChanged($i, $ti);
			insert(notification);
		}
end

rule "Set URLs Downloaded for Reference Crawl"   
	dialect "java"
	// the indicators are calculated after the prerequisite inferences
	salience 8
    when
    	// the Target Instance to analyse (must be the reference crawl)
    	$ti : TargetInstance( 	$hs : status,
    							status != null,
    							state == "Archived",
    							target.referenceCrawlOid != null,
    							oid == target.referenceCrawlOid
    	)
        // the QA Indicator to compute
        $rci: ReferenceCrawlIndicator( 	$v : floatValue, 
        								name == "URLs Downloaded" + " (RCI)" 
        )
  	    // map to relay the decision rationale to the ui
        $m : RuleMessageMap()
    then
    	// increment the indicator
		$rci.setFloatValue( new Float($hs.getUrlsDownloaded()) );
    	$m.put(drools.getRule().getName(), "Reference crawl ti " + $ti.getOid() + " has value of " + $rci.getFloatValue() + " for indicator " + $rci.getName()); 
    	// insert the fact that the indicator tolerance should be infered
    	InferRCIToleranceValue inferToleranceValue = new InferRCIToleranceValue( $ti, $rci );
    	insert(inferToleranceValue);
    	
end

rule "Set URLs Downloaded for ti"   
	dialect "java"
	// the indicators are calculated after the prerequisite inferences
	salience 8
    when
    	// the Target Instance to analyse
    	$ti : TargetInstance( 	$hs : status,
    							state == "Harvested"
    	)
        // the QA Indicator to compute
        $i : Indicator( $v : floatValue, 
        				name == "URLs Downloaded"
        )
        // map to relay the decision rationale to the ui
        $m : RuleMessageMap()
    then
    	// make a note of the urls downloaded value
    	$i.setFloatValue( new Float($hs.getUrlsDownloaded()) );
     	$m.put(drools.getRule().getName(), "Target instance " + $ti.getOid() + " has value of " + $i.getFloatValue() + " for indicator " + $i.getName());
     	HasChanged notification = new HasChanged($i, $ti); 
     	insert(notification);
end

// the Crawl Runtime indicator does not have a corresponding RCI
// the same indicator therefore applies to both new and old targets
rule "Set Crawl Runtime indicator"   
	dialect "java"
	// the indicators are calculated after the prerequisite inferences
	salience 8
    when
         // map to relay the decision rationale to the ui
        $m  : RuleMessageMap()	
        // the QA Indicator to compute
        $i : Indicator( name == "Crawl Runtime" )
    	// the crawl runtime has exceeded the indicators upper limit
		// the ti is harvested and the harvest status corresponds to this ti
    	$ti : TargetInstance(	state == "Harvested",
    							$hs : status,
    							status != null,
    							target.referenceCrawlOid != oid 
    	)
	then
	    // record the elapsed time
		$i.setFloatValue( new Float($hs.getElapsedTime()) );
      	HasChanged notification = new HasChanged( $i, $ti );
      	insert(notification); 
end



rule "Set Heritrix Error Codes (RCI)"
	dialect "java"
	salience 7
	when
		// the target instance (must not be the reference crawl)
    	$ti : TargetInstance( 	state == "Archived",
    							target.referenceCrawlOid != null,
    							oid == target.referenceCrawlOid
    	)
		$i : ReferenceCrawlIndicator( name == "Heritrix Error Codes" + " (RCI)" )
		// interface to the file store
		$hc : HarvestCoordinator()
		// map to relay the decision rationale to the ui
        $m : RuleMessageMap()
	then
		int count = 0;
		// fetch the crawl.log file
		try {
			File file = $hc.getLogfile($ti, "crawl.log");
			ArrayList<String> lines = WordCounter.getColumn(1, " ", file);
			// iterate through the column and count only the negative integer values
			Iterator<String> it = lines.iterator();
			
			while (it.hasNext()) {
				String line = it.next();
				if (line != null && !line.equals("")) {
					Integer errorCode = Integer.parseInt(line);
					if (errorCode < 0 
							|| errorCode.equals(403) 
							|| errorCode.equals(404)
							|| errorCode.equals(301)) {
						count++;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		$i.setFloatValue(new Float(count));
		$m.put(drools.getRule().getName(), "Target instance " + $ti.getOid() + " has value of " + $i.getFloatValue() + " for indicator " + $i.getName());
		// insert the fact that the indicator tolerance should be infered
    	InferRCIToleranceValue inferToleranceValue = new InferRCIToleranceValue( $ti, $i );
    	insert(inferToleranceValue);
end

rule "Set Heritrix Error Codes for ti"
	dialect "java"
	salience 8
	when
		// the target instance (must not be the reference crawl)
    	$ti : TargetInstance( 	state == "Harvested",
    							target.referenceCrawlOid != null,
    							oid != target.referenceCrawlOid
    	)
		$i : Indicator( name == "Heritrix Error Codes" )
		// interface to the file store
		$hc : HarvestCoordinator()
		// map to relay the decision rationale to the ui
        $m : RuleMessageMap()
	then
		// fetch the crawl.log file
		File file = $hc.getLogfile($ti, "crawl.log");
		ArrayList<String> lines = WordCounter.getColumn(1, " ", file);
		// iterate through the column and count only the negative integer values
		Iterator<String> it = lines.iterator();
		int count = 0;

		while (it.hasNext()) {
			String line = it.next();
			if (line != null && !line.equals("")) {
				Integer errorCode = Integer.parseInt(line);
				if (errorCode < 0 
						|| errorCode.equals(403) 
						|| errorCode.equals(404)
						|| errorCode.equals(301)) {
					count++;
					// persist the error code
					IndicatorReportLine irl = new IndicatorReportLine();
					irl.setIndicator($i);
					irl.setLine(errorCode.toString() + " " + HeritrixStatusDescription.getDescription(errorCode));
					$i.getIndicatorReportLines().add(irl);
				}
			}
		}
		$i.setFloatValue(new Float(count));
		$m.put(drools.getRule().getName(), "Target instance " + $ti.getOid() + " has value of " + $i.getFloatValue() + " for indicator " + $i.getName());
		HasChanged notification = new HasChanged( $i, $ti );
      	insert(notification); 
end


rule "Indicator exceeded its upper limit"
	dialect "java"
	salience -1
	when
		// a notification must exist denoting that an indicator has changed
		$h	: HasChanged( 	$i : indicator,
							indicator.getFloatValue() > indicator.getUpperLimit()
		)
        // map to relay the decision rationale to the ui
        $m  : RuleMessageMap()	
   	then
		HasExceededUpperLimit limit = new HasExceededUpperLimit($h.getTargetInstance(), $h.getIndicator());
		insert(limit);
end

rule "Indicator fallen below its lower limit"
	dialect "java"
	salience -1
	when
		// a notification must exist denoting that an indicator has changed
		$h	: HasChanged( 	$i : indicator,
							$i.getFloatValue() < $i.getLowerLimit(),
							$ti : targetInstance 
		)
        // map to relay the decision rationale to the ui
        $m  : RuleMessageMap()	
   	then
      	$m.put(drools.getRule().getName() + " (" + $i.getName() + ")", "Target instance " + $ti.getOid() + " and has value of " + $i.getFloatValue() + " for indicator " + $i.getName() + " has fallen below its lower limit value of " + $i.getLowerLimit()); 
		HasFallenBelowLowerLimit limit = new HasFallenBelowLowerLimit($ti, $i);
		insert(limit);
end


/*
 *	FURTHER INFERENCES
*/
rule "Infer RCI tolerance Value"   
	dialect "java"
	salience 5
    when
    	// map to relay the decision rationale to the ui
        $m  : RuleMessageMap()
		// a request to compute the tolerance value must exist
		InferRCIToleranceValue(	$ti : targetInstance, 
								$rci : rci
		)
    then
    	// calculate the positive tolerance of the value
		$rci.setPositiveTolerance( ($rci.getFloatValue()/100.0F)*$rci.getUpperLimitPercentage() );
		// calculate the negative tolerance of the value
		$rci.setNegativeTolerance( ($rci.getFloatValue()/100.0F)*$rci.getLowerLimitPercentage() );
		$m.put(drools.getRule().getName(), "Reference crawl " + $ti.getOid() + " has " + $rci.getName() + " value of " + $rci.getFloatValue() + ", tolerance band is therefore " + ($rci.getFloatValue() + $rci.getNegativeTolerance()) + " to " + ($rci.getFloatValue() + $rci.getPositiveTolerance()));
    	// infer if the ti falls within the RCI percentage tolerance
    	InferRCITolerance inferTolerance = new InferRCITolerance( $ti, $rci );
    	insert( inferTolerance );
end

rule "Infer indicator upper limit value from the RCI upper limit percentage"   
	dialect "java"
	salience 2
    when
		// a request to compute the tolerance value must exist
		InferIndicatorUpperLimitValue(	$ti : targetInstance, 
										$rci : rci, 
										$i : indicator
		)
		// map to relay the decision rationale to the ui
        $m  : RuleMessageMap()
    then
    	// calculate the positive tolerance of the value
		$i.setUpperLimit( ($rci.getFloatValue()/100.0F)*$rci.getUpperLimitPercentage() );
		$m.put(drools.getRule().getName() + " (" + $i.getName() + ")", "ti " + $ti.getOid() + " has " + $rci.getName() + " value of " + $rci.getFloatValue() + ", indicator " + $i.getName() + " upper limit is therefore " + $i.getUpperLimit() + " (" + $rci.getUpperLimitPercentage() + "%)");
		HasChanged notification = new HasChanged($i, $ti);
		insert(notification);
end

rule "Infer indicator upper limit tolerance value from the RCI upper limit percentage"   
	dialect "java"
	salience 6
    when
    	// map to relay the decision rationale to the ui
        $m  : RuleMessageMap()
		// a request to compute the tolerance value must exist
		InferIndicatorUpperLimitToleranceValue(	$rcti : rcTargetInstance, // the reference crawl ti
												$irci : rci,
												rci.upperLimitPercentage != null,
												$ti	:  targetInstance,
												$i : indicator												
		)
    then
    	// calculate the positive tolerance of the value
		$i.setUpperLimit( $irci.getFloatValue() + ($irci.getFloatValue()/100.0F)*$irci.getUpperLimitPercentage() );
		$m.put(drools.getRule().getName(), "ti " + $ti.getOid() + " has " + $irci.getName() + " value of " + $irci.getFloatValue() + ", indicator " + $i.getName() + " upper limit is therefore " + $i.getUpperLimit() + " (+" + $irci.getUpperLimitPercentage() + "%)");
		HasChanged notification = new HasChanged($i, $ti);
		insert(notification);
end

rule "Set Delist for ti"
	dialect "java"
	salience -2
	when
		$ti 	: TargetInstance( state == "Harvested" )
		$tim	: TargetInstanceManager()
		$i		: Indicator ( name == "Delist" )
		// content downloaded for the current ti
		$this_cd: Indicator ( name == "Content Downloaded" )
		// map to relay the decision rationale to the ui
        $m  	: RuleMessageMap()
	then
		// we use the indicator upper limit to define the number of crawls
		// that the content downloaded figure must not have changed for
		
		// fetch the previous harvest histories so that we can retrieve the associated tis and indicators
		Iterator<HarvestHistoryDTO> histories = $tim.getHarvestHistory($ti.getTarget().getOid()).iterator();
		int resultCount = 0;
		Long contentDownloaded = null;
		boolean inconsistentIndicatorValue = false;
		$i.setFloatValue(0.0F);
		while (histories.hasNext()) {
			// fetch the indicators from the assocaited ti
			HarvestHistoryDTO history = histories.next();
			
			// scroll forward until we reach the current ti
			while (!history.getOid().equals($ti.getOid()) && histories.hasNext() && resultCount == 0) {
				history = histories.next();
			} 
			// fetch the ti for the harvest history record
			TargetInstance ati = $tim.getTargetInstance(history.getOid());
			// fetch the indicators for the harvest history record
			Iterator<Indicator> indicators = ati.getIndicators().iterator();
			while (indicators.hasNext()) {
				// find the content downloaded indicator
				Indicator indicator = indicators.next();
				if (indicator.getName().equals("Content Downloaded")) {
					// if this is the first result then this defines the content downloaded that will be used for comparison
					// with the remaining history records
					if (resultCount == 0) {
						contentDownloaded = $this_cd.getFloatValue().longValue();
						//System.out.println("contentDownloaded for ti " + $ti.getOid() + ": " + contentDownloaded);
						$i.setFloatValue($i.getFloatValue() + 1.0F);
					} else {
						//System.out.println("Analysing previous crawl no:" + resultCount);
						// if the indicator value is identical to the retrieved indicator value then
						// increment the indicator value (compared for the last n crawls)
						if (!inconsistentIndicatorValue && contentDownloaded == indicator.getFloatValue().longValue() && resultCount <= $i.getUpperLimit().intValue()) {
							$i.setFloatValue($i.getFloatValue() + 1.0F);
							$m.put(drools.getRule().getName(), "Target instance " + $ti.getOid() + " has value of " + $i.getFloatValue() + " for indicator " + $i.getName());
						} else {
							if (contentDownloaded != indicator.getFloatValue().longValue() && resultCount <= $i.getUpperLimit().intValue()) {
								// reset the indicator
								$i.setFloatValue(0.0F);
								// mark it as inconsistent
								inconsistentIndicatorValue = true;
							} else if (resultCount > $i.getUpperLimit().intValue()) {
								//System.out.println("Harvest history no " + resultCount + " has exceeded the minimum number of crawls of " + $i.getUpperLimit().intValue() + " for indicator " + "Content Downloaded" + " (IGNORING)");
							}
						}
					}
					resultCount++;
				}
			}
		}
		
		// if the indicator upper limit is equal or greater than the indicator value then advise de-list
		if ($i.getUpperLimit().intValue() <= $i.getFloatValue()) {
	        MessageFormat form = new MessageFormat(globals.get("MSG_EXCEEDED_UPPER_LIMIT").toString());
	        Object[] values = {$i.getName(), $i.getValue(), $i.getValueOf($i.getUpperLimit())};
	        String message = form.format(values);
	        
	        $m.put(drools.getRule().getName(), message);
	       	Delist advice = new Delist($i, message);
		    insert( advice );
		}
end

/*
 *	ADVICE
*/
rule "Advise archive based on indicator falling within RCI tolerance percentages"
	salience -1
	when
		// the ti must be in the harvested state
		$ti		: TargetInstance( state == "Harvested" )
		// the indicator tolerance has been infered, and the tolerance values computed
		InferRCITolerance($rciti : targetInstance, $rci : rci)
		// the indicator for the ti (not the RCI)
		$i		: Indicator(   $rci.getFloatValue() + $rci.getPositiveTolerance() >= $i.getFloatValue()
							&& $rci.getFloatValue() + $rci.getNegativeTolerance() <= $i.getFloatValue()
							&& $rci.getFloatValue() + $rci.getPositiveTolerance() != 0.0F 
							&& $rci.getFloatValue() + $rci.getNegativeTolerance() != 0.0F
							// we never return the matching uris indicator since it is derived
							&& name != "Matching URIs"
							)
		// map to relay the decision rationale to the ui
		$m		: RuleMessageMap()
	then
		MessageFormat form = new MessageFormat(globals.get("MSG_WITHIN_TOLERANCE").toString());
        Object[] values = {$i.getName(), $i.getValueOf($i.getFloatValue()), $rci.getLowerLimitPercentage(), $rci.getUpperLimitPercentage(), $i.getValueOf($rci.getFloatValue() + $rci.getNegativeTolerance()), $i.getValueOf($i.getFloatValue()), $i.getValueOf($rci.getFloatValue() + $rci.getPositiveTolerance())};
        String message = form.format(values);
		
		$m.put(drools.getRule().getName() + " for indicator " + $i.getName(), message);
		Archive advice = new Archive($i, message);
		insert( advice );
		
end

/*
rule "Advise investigate based on indicator falling outside the RCI tolerance percentages"
	salience -1
	when
		// the ti must be in the harvested state
		$ti		: TargetInstance( state == "Harvested" )
		// the indicator tolerance has been infered, and the tolerance values computed
		InferRCITolerance($rciti : targetInstance, $rci : rci)
		// the indicator for the ti (not the RCI)
		$i		: Indicator(   
							$i.getFloatValue() != null
							&&	(	
									$rci.getFloatValue() + $rci.getPositiveTolerance() < $i.getFloatValue()
									|| $rci.getFloatValue() + $rci.getNegativeTolerance() > $i.getFloatValue()
								)
							&& $rci.getFloatValue() + $rci.getPositiveTolerance() != 0.0F 
							&& $rci.getFloatValue() + $rci.getNegativeTolerance() != 0.0F
							// we never return the matching uris indicator since it is derived
							&& name != "Matching URIs"
							&& name != "Delist"
							&& name != "Crawl Runtime"
							&& name != "Heritrix Error Codes"
							&& name != "Long URIs"
							&& name != "Missing URIs"
							&& name != "New URIs"
							&& name != "Off Scope URIs"
							&& name != "Repeating URI Patterns"
							&& name != "Robots.txt entries disallowed"
							&& name != "Sub Domains"
							&& name != "URLs Downloaded" 
							&& name != "Unknown MIME Types" 
							)
		// map to relay the decision rationale to the ui
		$m		: RuleMessageMap()
	then
		MessageFormat form = new MessageFormat(globals.get("MSG_OUTSIDE_TOLERANCE").toString());
        Object[] values = {$i.getName(), $i.getValueOf($i.getFloatValue()), $rci.getLowerLimitPercentage(), $rci.getUpperLimitPercentage(), $i.getValueOf($rci.getFloatValue() + $rci.getNegativeTolerance()), $i.getValueOf($i.getFloatValue()), $i.getValueOf($rci.getFloatValue() + $rci.getPositiveTolerance())};
        String message = form.format(values);
		
		$m.put(drools.getRule().getName() + " for indicator " + $i.getName(), message);
		Investigate advice = new Investigate($i, message);
		insert( advice );
		
end
*/

rule "Advise investigate recommendation based on an indicator value exceeding its upper limit"
	salience -1
	when
		HasExceededUpperLimit(	$ti : targetInstance, 
								$i  : indicator,
								$i.name != "Crawl Runtime"
								)
		// map to relay the decision rationale to the ui
		$m		: RuleMessageMap()
	then
        MessageFormat form = new MessageFormat(globals.get("MSG_EXCEEDED_UPPER_LIMIT").toString());
        Object[] values = {$i.getName(), $i.getValue(), $i.getValueOf($i.getUpperLimit())};
        String message = form.format(values);
        $m.put(drools.getRule().getName(), message);
        Investigate advice = new Investigate($i, message);
		insert( advice );
end

rule "Advise reject recommendation based on an indicator value exceeding its upper limit"
	salience -1
	when
		HasExceededUpperLimit(	$ti : targetInstance, 
								$i  : indicator,
								$i.name == "Crawl Runtime"
								)
		// map to relay the decision rationale to the ui
		$m		: RuleMessageMap()

	then
        MessageFormat form = new MessageFormat(globals.get("MSG_EXCEEDED_UPPER_LIMIT").toString());
        Object[] values = {$i.getName(), $i.getValue(), $i.getValueOf($i.getUpperLimit())};
        String message = form.format(values);
        
        $m.put(drools.getRule().getName(), message);
        Reject advice = new Reject($i, message);
		insert( advice );
end
	
rule "Advise reject recommendation based on an indicator value falling below its lower limit"
	salience -1
	when
		HasFallenBelowLowerLimit( 	$ti : targetInstance, 
									$i 	: indicator)
		$m		: RuleMessageMap()
	then

        MessageFormat form = new MessageFormat(globals.get("MSG_FALLEN_BELOW_LOWER_LIMIT").toString());
        Object[] values = {$i.getName(), $i.getValue(), $i.getValueOf($i.getLowerLimit())};
        String message = form.format(values);
        
        $m.put(drools.getRule().getName(), message);
       	Reject advice = new Reject($i, message);
	    insert( advice );
end

/*
 *	OUTCOMES
*/
rule "Reject"
	salience -4 // needs to run last
	when
		$ti		: TargetInstance()
		// reject is the strongest advice
		Reject( $i 			: indicator, 
				$message 	: message
		)
		// map to relay the decision rationale to the ui
		$m		: RuleMessageMap()
	then
		$m.put(drools.getRule().getName(), "Applied advice archive for ti " + $ti.getOid());
		$i.setAdvice(globals.get("REJECT").toString());		
		$i.setJustification($message);
end

rule "Investigate"
	salience -3 // needs to run afer archive advice
	when
		$ti		: TargetInstance()
		// investigate the ti 
		Investigate(	$i 		: indicator,
						$message	: message						
		)
		// map to relay the decision rationale to the ui
		$m		: RuleMessageMap()
	then
		$m.put(drools.getRule().getName(), "Applied advice investigate for ti " + $ti.getOid());
		$i.setAdvice(globals.get("INVESTIGATE").toString());		
		$i.setJustification($message);
end

rule "Archive"
	salience -2 // needs to run before any other advice
	when
		$ti		: TargetInstance()
		// archive the ti 
		Archive(	$i 		: indicator,
					$message 	: message	 
		)
		// map to relay the decision rationale to the ui
		$m		: RuleMessageMap()
	then
		$m.put(drools.getRule().getName(), "Applied advice archive for ti " + $ti.getOid());
		$i.setAdvice(globals.get("ARCHIVE").toString());		
		$i.setJustification($message);
end

rule "Delist"
	salience -2 // needs to run before any other advice
	when
		$ti		: TargetInstance()
		// delist the ti 
		Delist(		$i 			: indicator,
					$message 	: message	 
		)
		// map to relay the decision rationale to the ui
		$m		: RuleMessageMap()
	then
		$m.put(drools.getRule().getName(), "Applied advice delist for ti " + $ti.getOid());
		$i.setAdvice("Delist");		
		$i.setJustification($message);
end

/**
*	FINAL INDICATOR CHECKS
*/
rule "Check Advice"
	salience -5
	when
		$i : Indicator()
	then
		if ($i.getAdvice() == null || $i.getAdvice().equals("Running")) {
			$i.setAdvice("None");
		}
		$i.setDateTime(new Date());
end
